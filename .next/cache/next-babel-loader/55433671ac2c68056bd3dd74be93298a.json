{"ast":null,"code":"import { Centroid } from '../../shared/class/Centroid';\n\nconst {\n  range,\n  map,\n  pipe,\n  flip,\n  forEach: forE,\n  all: every\n} = require('ramda');\n\nconst {\n  reduce,\n  forEach\n} = require('list/curried');\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst getWordRange = blogs => i => reduce((r, blog) => ({\n  min: Math.min(r.min, blog.wordCount[i]),\n  max: Math.max(r.max, blog.wordCount[i])\n}), {\n  min: Infinity,\n  max: -Infinity\n}, blogs);\n/** getWordRanges :: [blogs] -> Number -> [WordRange] */\n\n\nconst getWordRanges = blogs => pipe(range(0), map(getWordRange(blogs)));\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5;\n  const MAX_ITERATIONS = 50;\n  let k = random(1)(20);\n  const n = 706;\n  const centroids = [];\n\n  for (let i = 0; i < k; i++) {\n    centroids[i] = new Centroid();\n    centroids.forEach(({\n      min,\n      max\n    }, id) => {\n      centroids[i].setTotalWords(id, random(min)(max));\n    });\n  }\n\n  res.json(JSON.stringify(centroids, null, 2));\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["Centroid","range","map","pipe","flip","forEach","forE","all","every","require","reduce","random","from","to","Math","getWordRange","blogs","i","r","blog","min","wordCount","max","Infinity","getWordRanges","kMean","req","res","CLUSTERS","MAX_ITERATIONS","k","n","centroids","id","setTotalWords","json","JSON","stringify"],"mappings":"AAGA,SAASA,QAAT,QAAyB,6BAAzB;;AAGA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,OAAO,EAAEC,IAAnC;AAAyCC,EAAAA,GAAG,EAAEC;AAA9C,IAAwDC,OAAO,CAAC,OAAD,CAArE;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUL,EAAAA;AAAV,IAAsBI,OAAO,CAAC,cAAD,CAAnC;;AAEA,MAAME,MAAM,GAAIC,IAAD,IAAmBC,EAAD,IAC/BD,IAAI,GAAGE,IAAI,CAACH,MAAL,MAAiBE,EAAE,GAAGD,IAAtB,CADT;;AAGA,MAAMG,YAAY,GAAIC,KAAD,IAAYC,CAAD,IAC9BP,MAAM,CACJ,CAACQ,CAAD,EAAIC,IAAJ,MAAc;AACZC,EAAAA,GAAG,EAAEN,IAAI,CAACM,GAAL,CAASF,CAAC,CAACE,GAAX,EAAgBD,IAAI,CAACE,SAAL,CAAeJ,CAAf,CAAhB,CADO;AAEZK,EAAAA,GAAG,EAAER,IAAI,CAACQ,GAAL,CAASJ,CAAC,CAACI,GAAX,EAAgBH,IAAI,CAACE,SAAL,CAAeJ,CAAf,CAAhB;AAFO,CAAd,CADI,EAKJ;AAAEG,EAAAA,GAAG,EAAEG,QAAP;AAAiBD,EAAAA,GAAG,EAAE,CAACC;AAAvB,CALI,EAMJP,KANI,CADR;AAUA;;;AACA,MAAMQ,aAAa,GAAIR,KAAD,IAAWb,IAAI,CAACF,KAAK,CAAC,CAAD,CAAN,EAAWC,GAAG,CAACa,YAAY,CAACC,KAAD,CAAb,CAAd,CAArC;;AAEA,MAAMS,KAAK,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC3D,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,CAAC,GAAGnB,MAAM,CAAC,CAAD,CAAN,CAAU,EAAV,CAAR;AACA,QAAMoB,CAAC,GAAG,GAAV;AAEA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,CAApB,EAAuBb,CAAC,EAAxB,EAA4B;AAC1Be,IAAAA,SAAS,CAACf,CAAD,CAAT,GAAe,IAAIjB,QAAJ,EAAf;AACAgC,IAAAA,SAAS,CAAC3B,OAAV,CAAkB,CAAC;AAAEe,MAAAA,GAAF;AAAOE,MAAAA;AAAP,KAAD,EAAeW,EAAf,KAAsB;AACtCD,MAAAA,SAAS,CAACf,CAAD,CAAT,CAAaiB,aAAb,CAA2BD,EAA3B,EAA+BtB,MAAM,CAACS,GAAD,CAAN,CAAYE,GAAZ,CAA/B;AACD,KAFD;AAGD;;AAEDK,EAAAA,GAAG,CAACQ,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeL,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAT;AACD,CAhBD;;AAkBA,eAAeP,KAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst { range, map, pipe, flip, forEach: forE, all: every } = require('ramda')\r\nconst { reduce, forEach } = require('list/curried')\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst getWordRange = (blogs) => (i) =>\r\n  reduce(\r\n    (r, blog) => ({\r\n      min: Math.min(r.min, blog.wordCount[i]),\r\n      max: Math.max(r.max, blog.wordCount[i]),\r\n    }),\r\n    { min: Infinity, max: -Infinity },\r\n    blogs\r\n  )\r\n\r\n/** getWordRanges :: [blogs] -> Number -> [WordRange] */\r\nconst getWordRanges = (blogs) => pipe(range(0), map(getWordRange(blogs)))\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS = 5\r\n  const MAX_ITERATIONS = 50\r\n  let k = random(1)(20)\r\n  const n = 706\r\n\r\n  const centroids = []\r\n\r\n  for (let i = 0; i < k; i++) {\r\n    centroids[i] = new Centroid()\r\n    centroids.forEach(({ min, max }, id) => {\r\n      centroids[i].setTotalWords(id, random(min)(max))\r\n    })\r\n  }\r\n\r\n  res.json(JSON.stringify(centroids, null, 2))\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}