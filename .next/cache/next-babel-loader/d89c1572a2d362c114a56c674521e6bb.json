{"ast":null,"code":"const getFrequencyScore = (p, query) => {\n  let score = 0;\n  const querySplit = query.split(' '); // string into array\n\n  /* Get key for page object, e.g. 7400_series */\n\n  for (let key in p) {\n    /* Condition that retrieves page objects properties */\n    if (p.hasOwnProperty(key)) {\n      /* Loop through the word list for that page */\n      for (let i = 0; i < p[key].words.length; i++) {\n        /* If there is a match add 1 to score */\n        for (let j = 0; j < querySplit.length; j++) {\n          if (p[key].words[i][0] == querySplit[j]) {\n            score++;\n          }\n        }\n      }\n    }\n  }\n\n  return score;\n};\n/**\r\n * @desc this function returns a location score\r\n * @param p takes scores.location\r\n * @param query is the search string\r\n */\n\n\nconst getLocationScore = (p, query) => {\n  let score = 0;\n  const querySplit = query.split(' '); // string into array\n\n  /* Get key for page object, e.g. 7400_series */\n\n  for (let key in p) {\n    let found = false;\n    /* Condition that retrieves page objects properties */\n\n    if (p.hasOwnProperty(key)) {\n      /* Loop through the word list for that page */\n      for (let i = 0; i < p[key].words.length; i++) {\n        let word = p[key].words[i][0];\n        /* If there is a match add index to score */\n\n        for (let j = 0; j < querySplit.length; j++) {\n          if (word == querySplit[j]) {\n            score += j + 1; // index of word in word list\n\n            found = true;\n            break;\n          }\n        }\n      }\n    }\n\n    if (!found) score += 100000;\n  }\n\n  return score;\n};\n\nconst getWordDistanceScore = (p, query) => {\n  let score = 0;\n  const querySplit = query.split(' '); // string into array\n\n  let locationScores = [];\n\n  for (let i = 0; i < querySplit.length; i++) {\n    let tmp = getLocationScore(p, querySplit[i]);\n    locationScores.push(tmp > 0 ? tmp : 100000);\n  }\n\n  for (let i = 0; i < locationScores.length; i++) {\n    for (let j = 1; j < locationScores.length; j++) {\n      if (locationScores[i] === 100000 || locationScores[j] === 100000) {\n        score += 100000;\n      } else {\n        score += Math.abs(locationScores[i] - locationScores[j]);\n      }\n\n      break;\n    }\n\n    break;\n  }\n\n  return score;\n};\n\nconst normalize = (scores, smallIsBetter) => {\n  if (smallIsBetter) {\n    let min = Math.min(...scores);\n\n    for (let i = 0; i < scores.length; i++) scores[i] = min / Math.max(scores[i], 0.00001);\n  } else {\n    let max = Math.max(...scores);\n    max = Math.max(max, 0.00001);\n\n    for (let i = 0; i < scores.length; i++) scores[i] = scores[i] / max;\n  }\n\n  return scores;\n};\n\nconst search = (req, res) => {\n  // const query: any = req.body.query\n  const query = 'super mario';\n\n  const fs = require('fs');\n\n  const str = fs.readFileSync('shared/json/pages.json').toString();\n  let obj = JSON.parse(str);\n  let result = [];\n  let scores = {\n    content: [],\n    location: [],\n    distance: []\n  };\n\n  for (let i = 0; i < obj.length; i++) {\n    let p = obj[i]; // this is the page object\n\n    /* Here comes the frequence metric function */\n\n    scores.content[i] = getFrequencyScore(p, query);\n    scores.location[i] = getLocationScore(p, query);\n    scores.distance[i] = getWordDistanceScore(p, query);\n  }\n  /* Here comes the normalization of the scores */\n\n\n  normalize(scores.content, false);\n  normalize(scores.location, true);\n  normalize(scores.distance, true);\n  let score; // end score\n\n  for (let i = 0; i < obj.length; i++) {\n    let p = obj[i];\n    score = 1.0 * scores.content[i] + 0.5 * scores.location[i]; // score = scores.content[i] + 0.8 * scores.location[i]\n\n    /* Get key for page object, e.g. 7400_series */\n\n    for (let key in p) {\n      /* Condition that retrieves page objects properties */\n      if (p.hasOwnProperty(key)) {\n        result.push({\n          [key]: {\n            score: score,\n            content: scores.content[i],\n            location: scores.location[i],\n            distance: scores.distance[i],\n            pagerank: 0\n          }\n        });\n      }\n    }\n  }\n\n  res.json(JSON.stringify(result, null, 2));\n};\n\nexport default search;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A3/pages/api/search.ts"],"names":["getFrequencyScore","p","query","score","querySplit","split","key","hasOwnProperty","i","words","length","j","getLocationScore","found","word","getWordDistanceScore","locationScores","tmp","push","Math","abs","normalize","scores","smallIsBetter","min","max","search","req","res","fs","require","str","readFileSync","toString","obj","JSON","parse","result","content","location","distance","pagerank","json","stringify"],"mappings":"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","sourcesContent":["import { strict } from 'assert'\r\nimport { forEach } from 'list'\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\n\r\nconst getFrequencyScore = (p: object, query: string): number => {\r\n  let score: number = 0\r\n  const querySplit: Array<string> = query.split(' ') // string into array\r\n\r\n  /* Get key for page object, e.g. 7400_series */\r\n  for (let key in p) {\r\n    /* Condition that retrieves page objects properties */\r\n    if (p.hasOwnProperty(key)) {\r\n      /* Loop through the word list for that page */\r\n      for (let i = 0; i < p[key].words.length; i++) {\r\n        /* If there is a match add 1 to score */\r\n        for (let j = 0; j < querySplit.length; j++) {\r\n          if (p[key].words[i][0] == querySplit[j]) {\r\n            score++\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return score\r\n}\r\n\r\n/**\r\n * @desc this function returns a location score\r\n * @param p takes scores.location\r\n * @param query is the search string\r\n */\r\nconst getLocationScore = (p: object, query: string): number => {\r\n  let score: number = 0\r\n  const querySplit: Array<string> = query.split(' ') // string into array\r\n\r\n  /* Get key for page object, e.g. 7400_series */\r\n  for (let key in p) {\r\n    let found: boolean = false\r\n    /* Condition that retrieves page objects properties */\r\n    if (p.hasOwnProperty(key)) {\r\n      /* Loop through the word list for that page */\r\n      for (let i = 0; i < p[key].words.length; i++) {\r\n        let word = p[key].words[i][0]\r\n        /* If there is a match add index to score */\r\n        for (let j = 0; j < querySplit.length; j++) {\r\n          if (word == querySplit[j]) {\r\n            score += j + 1 // index of word in word list\r\n            found = true\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!found) score += 100000\r\n  }\r\n\r\n  return score\r\n}\r\n\r\nconst getWordDistanceScore = (p: object, query: string): any => {\r\n  let score: number = 0\r\n  const querySplit: Array<string> = query.split(' ') // string into array\r\n  let locationScores = []\r\n\r\n  for (let i = 0; i < querySplit.length; i++) {\r\n    let tmp = getLocationScore(p, querySplit[i])\r\n    locationScores.push(tmp > 0 ? tmp : 100000)\r\n  }\r\n\r\n  for (let i = 0; i < locationScores.length; i++) {\r\n    for (let j = 1; j < locationScores.length; j++) {\r\n      if (locationScores[i] === 100000 || locationScores[j] === 100000) {\r\n        score += 100000\r\n      } else {\r\n        score += Math.abs(locationScores[i] - locationScores[j])\r\n      }\r\n      break\r\n    }\r\n    break\r\n  }\r\n\r\n  return score\r\n}\r\n\r\nconst normalize = (\r\n  scores: Array<number>,\r\n  smallIsBetter: boolean\r\n): Array<number> => {\r\n  if (smallIsBetter) {\r\n    let min: number = Math.min(...scores)\r\n    for (let i = 0; i < scores.length; i++)\r\n      scores[i] = min / Math.max(scores[i], 0.00001)\r\n  } else {\r\n    let max: number = Math.max(...scores)\r\n    max = Math.max(max, 0.00001)\r\n    for (let i = 0; i < scores.length; i++) scores[i] = scores[i] / max\r\n  }\r\n\r\n  return scores\r\n}\r\n\r\nconst search = (req: NextApiRequest, res: NextApiResponse) => {\r\n  // const query: any = req.body.query\r\n  const query: string = 'super mario'\r\n\r\n  const fs = require('fs')\r\n  const str: string = fs.readFileSync('shared/json/pages.json').toString()\r\n  let obj: Array<object> = JSON.parse(str)\r\n\r\n  let result = []\r\n  let scores = { content: [], location: [], distance: [] }\r\n\r\n  for (let i = 0; i < obj.length; i++) {\r\n    let p = obj[i] // this is the page object\r\n\r\n    /* Here comes the frequence metric function */\r\n    scores.content[i] = getFrequencyScore(p, query)\r\n    scores.location[i] = getLocationScore(p, query)\r\n    scores.distance[i] = getWordDistanceScore(p, query)\r\n  }\r\n\r\n  /* Here comes the normalization of the scores */\r\n  normalize(scores.content, false)\r\n  normalize(scores.location, true)\r\n  normalize(scores.distance, true)\r\n\r\n  let score: number // end score\r\n\r\n  for (let i = 0; i < obj.length; i++) {\r\n    let p = obj[i]\r\n\r\n    score = 1.0 * scores.content[i] + 0.5 * scores.location[i]\r\n    // score = scores.content[i] + 0.8 * scores.location[i]\r\n\r\n    /* Get key for page object, e.g. 7400_series */\r\n    for (let key in p) {\r\n      /* Condition that retrieves page objects properties */\r\n      if (p.hasOwnProperty(key)) {\r\n        result.push({\r\n          [key]: {\r\n            score: score,\r\n            content: scores.content[i],\r\n            location: scores.location[i],\r\n            distance: scores.distance[i],\r\n            pagerank: 0\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  res.json(JSON.stringify(result, null, 2))\r\n}\r\n\r\nexport default search\r\n"]},"metadata":{},"sourceType":"module"}