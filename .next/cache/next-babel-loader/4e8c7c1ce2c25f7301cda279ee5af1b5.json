{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst euclidean = async (A, B) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  let test = \"\";\n\n  for (let i = 0; i < A.length; i++) {\n    for (let j = 0; j < B.length; j++) {\n      if (A[i]['movieId'] == B[j]['movieId']) {\n        // sim += (A[i]['rating'] - B[j]['rating']) ** 2;\n        // n += 1;\n        test += A[i]['title'] + \" \" + A[i]['rating'] + \"\\n\";\n        console.log(\"HELLÅ???\");\n      }\n    }\n  } // if (n == 0) {\n  //     return 0;\n  // }\n  // let inv = 1 / (1 + sim);\n\n\n  return test;\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  /* Retrieve ratings that belongs to main user */\n\n  let ratings1 = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  /* Retrieve ratings for all the other users */\n\n  let ratings2 = await db.all('SELECT userId, movies.title, ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [2]);\n  let result = await euclidean(ratings1, ratings2); // res.json(ratings1);\n\n  res.json(result);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","euclidean","A","B","sim","n","test","i","length","j","console","log","euclideanAPI","req","res","id","query","db","open","filename","driver","Database","ratings1","all","ratings2","result","json"],"mappings":"AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAME,SAAS,GAAG,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC9B,MAAIC,GAAW,GAAG,CAAlB,CAD8B,CACT;;AACrB,MAAIC,CAAS,GAAG,CAAhB,CAF8B,CAEX;;AAEnB,MAAIC,IAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACM,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,CAAC,CAACK,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AAE/B,UAAIP,CAAC,CAACK,CAAD,CAAD,CAAK,SAAL,KAAmBJ,CAAC,CAACM,CAAD,CAAD,CAAK,SAAL,CAAvB,EAAwC;AACpC;AACA;AAEAH,QAAAA,IAAI,IAAIJ,CAAC,CAACK,CAAD,CAAD,CAAK,OAAL,IAAgB,GAAhB,GAAsBL,CAAC,CAACK,CAAD,CAAD,CAAK,QAAL,CAAtB,GAAuC,IAA/C;AAEAG,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;AAEJ;AACJ,GAnB6B,CAqB9B;AACA;AACA;AAEA;;;AAEA,SAAOL,IAAP;AACH,CA5BD;;AA8BA,MAAMM,YAAY,GAAG,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACtE,QAAMC,EAAE,GAAGF,GAAG,CAACG,KAAJ,CAAUD,EAArB,CADsE,CAC7C;;AAEzB;;AACA,QAAME,EAAE,GAAG,MAAMjB,MAAM,CAACkB,IAAP,CAAY;AACzBC,IAAAA,QAAQ,EAAE,eADe;AAEzBC,IAAAA,MAAM,EAAEtB,OAAO,CAACuB;AAFS,GAAZ,CAAjB;AAKA;;AACA,MAAIC,QAAQ,GAAG,MAAML,EAAE,CAACM,GAAH,CAAO,mJAAP,EAA4J,CAACR,EAAD,CAA5J,CAArB;AAEA;;AACA,MAAIS,QAAQ,GAAG,MAAMP,EAAE,CAACM,GAAH,CAAO,2JAAP,EAAoK,CAAC,CAAD,CAApK,CAArB;AAEA,MAAIE,MAAM,GAAG,MAAMxB,SAAS,CAACqB,QAAD,EAAWE,QAAX,CAA5B,CAfsE,CAiBtE;;AACAV,EAAAA,GAAG,CAACY,IAAJ,CAASD,MAAT;AACH,CAnBD;;AAqBA,eAAeb,YAAf","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst euclidean = async (A, B) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    let test: String = \"\";\r\n\r\n    for (let i = 0; i < A.length; i++) {\r\n        for (let j = 0; j < B.length; j++) {\r\n\r\n            if (A[i]['movieId'] == B[j]['movieId']) {\r\n                // sim += (A[i]['rating'] - B[j]['rating']) ** 2;\r\n                // n += 1;\r\n\r\n                test += A[i]['title'] + \" \" + A[i]['rating'] + \"\\n\";\r\n\r\n                console.log(\"HELLÅ???\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // if (n == 0) {\r\n    //     return 0;\r\n    // }\r\n\r\n    // let inv = 1 / (1 + sim);\r\n\r\n    return test;\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    /* Retrieve ratings that belongs to main user */\r\n    let ratings1 = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    /* Retrieve ratings for all the other users */\r\n    let ratings2 = await db.all('SELECT userId, movies.title, ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [2]);\r\n\r\n    let result = await euclidean(ratings1, ratings2);\r\n\r\n    // res.json(ratings1);\r\n    res.json(result);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}