{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst euclidean = async (A, B) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < A.length; i++) {\n    res.json(A[i]['rating']);\n  } // return A;\n\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  /* Retrieve ratings that belongs to main user */\n\n  let ratings1 = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  /* Retrieve ratings for all the other users */\n\n  let ratings2 = await db.all('SELECT userId, movies.title, ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [2]);\n  let result = await euclidean(ratings1, ratings2);\n  result = JSON.stringify(result, null, 2); // res.json(ratings1);\n\n  res.json(result);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","euclidean","A","B","sim","n","i","length","res","json","euclideanAPI","req","id","query","db","open","filename","driver","Database","ratings1","all","ratings2","result","JSON","stringify"],"mappings":"AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAME,SAAS,GAAG,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC9B,MAAIC,GAAW,GAAG,CAAlB,CAD8B,CACT;;AACrB,MAAIC,CAAS,GAAG,CAAhB,CAF8B,CAEX;;AAEnB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAAC,CAACK,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/BE,IAAAA,GAAG,CAACC,IAAJ,CAASP,CAAC,CAACI,CAAD,CAAD,CAAK,QAAL,CAAT;AACH,GAN6B,CAQ9B;;AACH,CATD;;AAWA,MAAMI,YAAY,GAAG,OAAOC,GAAP,EAA4BH,GAA5B,KAAqD;AACtE,QAAMI,EAAE,GAAGD,GAAG,CAACE,KAAJ,CAAUD,EAArB,CADsE,CAC7C;;AAEzB;;AACA,QAAME,EAAE,GAAG,MAAMd,MAAM,CAACe,IAAP,CAAY;AACzBC,IAAAA,QAAQ,EAAE,eADe;AAEzBC,IAAAA,MAAM,EAAEnB,OAAO,CAACoB;AAFS,GAAZ,CAAjB;AAKA;;AACA,MAAIC,QAAQ,GAAG,MAAML,EAAE,CAACM,GAAH,CAAO,mJAAP,EAA4J,CAACR,EAAD,CAA5J,CAArB;AAEA;;AACA,MAAIS,QAAQ,GAAG,MAAMP,EAAE,CAACM,GAAH,CAAO,2JAAP,EAAoK,CAAC,CAAD,CAApK,CAArB;AAEA,MAAIE,MAAM,GAAG,MAAMrB,SAAS,CAACkB,QAAD,EAAWE,QAAX,CAA5B;AACAC,EAAAA,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAeF,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAT,CAhBsE,CAkBtE;;AACAd,EAAAA,GAAG,CAACC,IAAJ,CAASa,MAAT;AACH,CApBD;;AAsBA,eAAeZ,YAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst euclidean = async (A, B) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < A.length; i++) {\r\n        res.json(A[i]['rating']);\r\n    }\r\n\r\n    // return A;\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    /* Retrieve ratings that belongs to main user */\r\n    let ratings1 = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    /* Retrieve ratings for all the other users */\r\n    let ratings2 = await db.all('SELECT userId, movies.title, ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [2]);\r\n\r\n    let result = await euclidean(ratings1, ratings2);\r\n    result = JSON.stringify(result, null, 2);\r\n\r\n    // res.json(ratings1);\r\n    res.json(result);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}