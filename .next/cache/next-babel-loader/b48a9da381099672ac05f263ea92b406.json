{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst weightedCalculations = async a => {\n  let arr = a[0];\n  /* wsum */\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < a.length; i++) {\n      if (a[i]['movieId'] == a[j]['movieId']) {} else {}\n    }\n  }\n\n  return arr;\n};\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\n\n\nconst weightedScore = async (a, score) => {\n  let arr = [];\n\n  for (let i = 0; i < a.length; i++) {\n    let wScore = a[i]['rating'] * score;\n    arr.push({\n      movieId: a[i]['rating'],\n      title: a[i]['title'],\n      wScore: wScore\n    });\n  }\n\n  return arr;\n};\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\n\n\nconst euclideanUser = async (a, b) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i]['movieId'] == b[j]['movieId']) {\n        sim += (a[i]['rating'] - b[j]['rating']) ** 2;\n        n += 1;\n      }\n    }\n  }\n\n  if (n == 0) {\n    return 0;\n  }\n\n  let inv = 1 / (1 + sim);\n  return (Math.round(inv * 100) / 100).toFixed(2); // return inv;\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  /* sql */\n\n  let user = await db.all('SELECT * FROM users where id = ?', [id]);\n  /* Retrieve ratings that belongs to main user */\n\n  let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  let otherUsers = await db.all('SELECT name, id FROM users where id != ?', [id]);\n  let userSimilarity = []; // adding euclidean result here\n\n  let x = []; // adding euclidean result here\n\n  /* Getting the similarity between users */\n\n  for (let i = 0; i < otherUsers.length; i++) {\n    let id = otherUsers[i]['id'];\n    let name = otherUsers[i]['name'];\n    /* Retrieve ratings for all the other users */\n\n    let otherUserRatings = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n    let euclideanScore = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\n\n    let wScore = await weightedScore(otherUserRatings, euclideanScore); // get weighter score\n\n    x.push({\n      weighted_scores: wScore\n    });\n    /* Push objects */\n\n    userSimilarity.push({\n      id: id,\n      user_name: name,\n      score: euclideanScore,\n      weighted_scores: wScore // high score = more similar\n\n    });\n  }\n  /* Push array with user objects */\n\n\n  user[0]['user_similarity'] = userSimilarity; // user = JSON.stringify(user, null, 2);\n\n  x = user.map(y => {\n    return y['user_similarity'].map(k => {\n      return k['weighted_scores'];\n    });\n  });\n  let test2 = weightedCalculations(x[0]);\n  let test = JSON.stringify(x[0], null, 2);\n  res.json(test2);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","weightedCalculations","a","arr","i","length","j","weightedScore","score","wScore","push","movieId","title","euclideanUser","b","sim","n","inv","Math","round","toFixed","euclideanAPI","req","res","id","query","db","open","filename","driver","Database","user","all","userRatings","otherUsers","userSimilarity","x","name","otherUserRatings","euclideanScore","weighted_scores","user_name","map","y","k","test2","test","JSON","stringify","json"],"mappings":"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","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst weightedCalculations = async (a: Array<any>) => {\r\n    \r\n    let arr: Array<any> = a[0];\r\n\r\n    /* wsum */\r\n    for (let i: number = 0; i < a.length; i++) {\r\n        for (let j: number = 0; j < a.length; i++) {\r\n            if (a[i]['movieId'] == a[j]['movieId']) {\r\n                \r\n            } else {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return arr;\r\n\r\n}\r\n\r\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\r\nconst weightedScore = async (a: any, score: number) => {\r\n    \r\n    let arr: Array<any> = [];\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        let wScore: number = a[i]['rating'] * score;\r\n\r\n        arr.push({\r\n            movieId: a[i]['rating'],\r\n            title: a[i]['title'],\r\n            wScore: wScore\r\n        });\r\n\r\n    }\r\n\r\n    return arr;\r\n}\r\n \r\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\r\nconst euclideanUser = async (a: any, b: any) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        for (let j = 0; j < b.length; j++) {\r\n            if (a[i]['movieId'] == b[j]['movieId']) {\r\n                sim += (a[i]['rating'] - b[j]['rating']) ** 2;\r\n                n += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (n == 0) {\r\n        return 0;\r\n    }\r\n\r\n    let inv: number = 1 / (1 + sim);\r\n\r\n    return (Math.round(inv * 100) / 100).toFixed(2);\r\n    // return inv;\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id: any = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    /* sql */\r\n    let user: any = await db.all('SELECT * FROM users where id = ?', [id]);\r\n    /* Retrieve ratings that belongs to main user */\r\n    let userRatings: any = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n    let otherUsers: any = await db.all('SELECT name, id FROM users where id != ?', [id]);\r\n\r\n    let userSimilarity: Array<any> = []; // adding euclidean result here\r\n    let x: Array<any> = []; // adding euclidean result here\r\n\r\n    /* Getting the similarity between users */\r\n    for (let i: number = 0; i < otherUsers.length; i++) {\r\n\r\n        let id: number = otherUsers[i]['id'];\r\n        let name: String = otherUsers[i]['name'];\r\n\r\n        /* Retrieve ratings for all the other users */\r\n        let otherUserRatings: any = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n     \r\n        let euclideanScore: any = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\r\n        let wScore: any = await weightedScore(otherUserRatings, euclideanScore); // get weighter score\r\n\r\n        x.push({weighted_scores: wScore});\r\n\r\n        /* Push objects */\r\n        userSimilarity.push({\r\n            id: id,\r\n            user_name: name,\r\n            score: euclideanScore,\r\n            weighted_scores: wScore // high score = more similar\r\n        });\r\n    }\r\n\r\n    /* Push array with user objects */\r\n    user[0]['user_similarity'] = userSimilarity;\r\n\r\n    // user = JSON.stringify(user, null, 2);\r\n\r\n    x = user.map(y => {\r\n        return y['user_similarity'].map(k => {\r\n            return k['weighted_scores'];\r\n        });\r\n    })\r\n\r\n    let test2 = weightedCalculations(x[0]);\r\n\r\n    let test = JSON.stringify(x[0], null, 2);\r\n\r\n    res.json(test2);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}