{"ast":null,"code":"import jsonResult from '../../shared/functions/convertDatasetToJson';\nimport { Centroid } from '../../shared/class/Centroid';\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst initCentroids = k => ranges => {\n  const centroids = [];\n\n  for (let i = 0; i < k; i++) {\n    centroids[i] = new Centroid();\n    ranges.forEach(({\n      min,\n      max\n    }, idx) => {\n      centroids[i].setTotalWords(idx, random(min)(max));\n    });\n  }\n\n  return centroids;\n};\n\nconst kMean = (req, res) => {\n  const n = jsonResult()[0].total;\n  const centroids = [];\n  res.json(n);\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["jsonResult","Centroid","random","from","to","Math","initCentroids","k","ranges","centroids","i","forEach","min","max","idx","setTotalWords","kMean","req","res","n","total","json"],"mappings":"AACA,OAAOA,UAAP,MAAuB,6CAAvB;AAEA,SAASC,QAAT,QAAyB,6BAAzB;;AAEA,MAAMC,MAAM,GAAIC,IAAD,IAAWC,EAAD,IAAQD,IAAI,GAAGE,IAAI,CAACH,MAAL,MAAiBE,EAAE,GAAGD,IAAtB,CAAxC;;AAEA,MAAMG,aAAa,GAAIC,CAAD,IAAQC,MAAD,IAAY;AACvC,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1BD,IAAAA,SAAS,CAACC,CAAD,CAAT,GAAe,IAAIT,QAAJ,EAAf;AACAO,IAAAA,MAAM,CAACG,OAAP,CAAe,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,EAAeC,GAAf,KAAuB;AACpCL,MAAAA,SAAS,CAACC,CAAD,CAAT,CAAaK,aAAb,CAA2BD,GAA3B,EAAgCZ,MAAM,CAACU,GAAD,CAAN,CAAYC,GAAZ,CAAhC;AACD,KAFD;AAGD;;AAED,SAAOJ,SAAP;AACD,CAXD;;AAaA,MAAMO,KAAK,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC3D,QAAMC,CAAC,GAAGnB,UAAU,GAAG,CAAH,CAAV,CAAgBoB,KAA1B;AACA,QAAMX,SAAS,GAAG,EAAlB;AAEAS,EAAAA,GAAG,CAACG,IAAJ,CAASF,CAAT;AACD,CALD;;AAOA,eAAeH,KAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\n\r\nconst random = (from) => (to) => from + Math.random() * (to - from)\r\n\r\nconst initCentroids = (k) => (ranges) => {\r\n  const centroids = []\r\n\r\n  for (let i = 0; i < k; i++) {\r\n    centroids[i] = new Centroid()\r\n    ranges.forEach(({ min, max }, idx) => {\r\n      centroids[i].setTotalWords(idx, random(min)(max))\r\n    })\r\n  }\r\n\r\n  return centroids\r\n}\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const n = jsonResult()[0].total\r\n  const centroids = []\r\n\r\n  res.json(n)\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}