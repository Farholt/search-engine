{"ast":null,"code":"import jsonResult from '../../shared/functions/convertDatasetToJson';\nimport { Centroid } from '../../shared/class/Centroid';\nimport pearson from '../../shared/functions/pearson';\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5; // set max cluster\n\n  const MAX_ITERATIONS = 50; // set max iterations\n\n  const n = 706; // set n of words\n\n  const blogs = jsonResult()[0].blogs; // the blogs\n\n  const centroids = []; // empty array for coming Centroid objects\n\n  /* Generate random centroids */\n\n  for (let i = 0; i < CLUSTERS; i++) {\n    centroids[i] = new Centroid(); // for every cluster, add centroid\n\n    /* ...Then loop MAX_ITERATIONS of times */\n\n    for (let j = 0; j < n; j++) {\n      centroids[i].setWordCount(j, random(0)(n)); // random min[j] (0) to max[j] (706)\n    }\n  }\n\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\n    centroids.forEach(e => e.clearAssignments());\n\n    for (let j = 0; j < blogs.length; j++) {\n      let distance = Infinity; // infinite value\n\n      let best; // best\n\n      for (let k = 0; k < centroids.length; k++) {\n        const cDist = pearson(centroids[k], blogs[j]);\n\n        if (cDist < distance) {\n          best = centroids[k];\n          distance = cDist;\n        }\n      }\n\n      best.assign(blogs[j]);\n    }\n\n    for (let y = 0; y < centroids.length; y++) {\n      for (let l = 0; l < n; l++) {\n        var avg = 0;\n\n        for (let j = 0; j < centroids[y]['assignments'].length; j++) {\n          avg += centroids[y]['assignments'][j].wordCount[l];\n        }\n\n        avg /= centroids[y]['assignments'].length;\n        centroids[y].setWordCount(l, avg);\n      }\n    }\n  }\n\n  let arr = centroids.map(x => x.assignments.map(y => y.name));\n  res.json(JSON.stringify(arr, null, 2));\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["jsonResult","Centroid","pearson","random","from","to","Math","kMean","req","res","CLUSTERS","MAX_ITERATIONS","n","blogs","centroids","i","j","setWordCount","forEach","e","clearAssignments","length","distance","Infinity","best","k","cDist","assign","y","l","avg","wordCount","arr","map","x","assignments","name","json","JSON","stringify"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS: number = 5 // set max cluster\r\n  const MAX_ITERATIONS: number = 50 // set max iterations\r\n  const n: number = 706 // set n of words\r\n  const blogs = jsonResult()[0].blogs // the blogs\r\n\r\n  const centroids: Array<any> = [] // empty array for coming Centroid objects\r\n\r\n  /* Generate random centroids */\r\n  for (let i = 0; i < CLUSTERS; i++) {\r\n    centroids[i] = new Centroid() // for every cluster, add centroid\r\n\r\n    /* ...Then loop MAX_ITERATIONS of times */\r\n    for (let j = 0; j < n; j++) {\r\n      centroids[i].setWordCount(j, random(0)(n)) // random min[j] (0) to max[j] (706)\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\r\n    centroids.forEach((e) => e.clearAssignments())\r\n\r\n    for (let j = 0; j < blogs.length; j++) {\r\n      let distance: number = Infinity // infinite value\r\n      let best: any // best\r\n\r\n      for (let k = 0; k < centroids.length; k++) {\r\n        const cDist: number = pearson(centroids[k], blogs[j])\r\n        if (cDist < distance) {\r\n          best = centroids[k]\r\n          distance = cDist\r\n        }\r\n      }\r\n      best.assign(blogs[j])\r\n    }\r\n\r\n    for (let y = 0; y < centroids.length; y++) {\r\n      for (let l = 0; l < n; l++) {\r\n        var avg: number = 0\r\n        for (let j = 0; j < centroids[y]['assignments'].length; j++) {\r\n          avg += centroids[y]['assignments'][j].wordCount[l]\r\n        }\r\n        avg /= centroids[y]['assignments'].length\r\n        centroids[y].setWordCount(l, avg)\r\n      }\r\n    }\r\n  }\r\n\r\n  let arr = centroids.map((x) => x.assignments.map((y: any) => y.name))\r\n\r\n  res.json(JSON.stringify(arr, null, 2))\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}