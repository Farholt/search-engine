{"ast":null,"code":"let csvToJson = require('convert-csv-to-json');\n\nconst jsonResult = () => {\n  const rawJson = csvToJson.getJsonFromCsv('./shared/data/blogdata.csv');\n  /* New Json Array */\n\n  let arr = [{\n    total: [],\n    words: [],\n    blogs: []\n  }];\n\n  for (var propName in rawJson[0]) {\n    arr[0].words.push(propName);\n  }\n\n  for (let i = 0; i < rawJson.length; i++) {\n    /* For storing total word count */\n    let tmp = [];\n    /* Get total word count */\n\n    for (var propName in rawJson[i]) {\n      if (rawJson[i].hasOwnProperty(propName)) {\n        let v = parseInt(rawJson[i][propName]); // parse string to int\n\n        if (v >= 0) tmp.push(v); // get rid of blog name from word list\n      }\n    }\n    /* Store blog data in seperate objects */\n\n\n    arr[0]['blogs'].push({\n      name: rawJson[i]['Blog'],\n      wordsTotal: tmp\n    });\n  }\n\n  arr[0].total = arr[0].words.length;\n  return arr;\n};\n\nexport default jsonResult;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/shared/functions/convertDatasetToJson.ts"],"names":["csvToJson","require","jsonResult","rawJson","getJsonFromCsv","arr","total","words","blogs","propName","push","i","length","tmp","hasOwnProperty","v","parseInt","name","wordsTotal"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,OAAO,GAAGH,SAAS,CAACI,cAAV,CAAyB,4BAAzB,CAAhB;AAEA;;AACA,MAAIC,GAAG,GAAG,CACR;AACEC,IAAAA,KAAK,EAAE,EADT;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,KAAK,EAAE;AAHT,GADQ,CAAV;;AAQA,OAAK,IAAIC,QAAT,IAAqBN,OAAO,CAAC,CAAD,CAA5B,EAAiC;AAC/BE,IAAAA,GAAG,CAAC,CAAD,CAAH,CAAOE,KAAP,CAAaG,IAAb,CAAkBD,QAAlB;AACD;;AAED,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC;AACA,QAAIE,GAAG,GAAG,EAAV;AAEA;;AACA,SAAK,IAAIJ,QAAT,IAAqBN,OAAO,CAACQ,CAAD,CAA5B,EAAiC;AAC/B,UAAIR,OAAO,CAACQ,CAAD,CAAP,CAAWG,cAAX,CAA0BL,QAA1B,CAAJ,EAAyC;AACvC,YAAIM,CAAC,GAAGC,QAAQ,CAACb,OAAO,CAACQ,CAAD,CAAP,CAAWF,QAAX,CAAD,CAAhB,CADuC,CACA;;AACvC,YAAIM,CAAC,IAAI,CAAT,EAAYF,GAAG,CAACH,IAAJ,CAASK,CAAT,EAF2B,CAEf;AACzB;AACF;AAED;;;AACAV,IAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,OAAP,EAAgBK,IAAhB,CAAqB;AACnBO,MAAAA,IAAI,EAAEd,OAAO,CAACQ,CAAD,CAAP,CAAW,MAAX,CADa;AAEnBO,MAAAA,UAAU,EAAEL;AAFO,KAArB;AAID;;AAEDR,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAOC,KAAP,GAAeD,GAAG,CAAC,CAAD,CAAH,CAAOE,KAAP,CAAaK,MAA5B;AAEA,SAAOP,GAAP;AACD,CAtCD;;AAwCA,eAAeH,UAAf","sourcesContent":["let csvToJson = require('convert-csv-to-json')\r\n\r\nconst jsonResult = () => {\r\n  const rawJson = csvToJson.getJsonFromCsv('./shared/data/blogdata.csv')\r\n\r\n  /* New Json Array */\r\n  let arr = [\r\n    {\r\n      total: [],\r\n      words: [],\r\n      blogs: [],\r\n    },\r\n  ]\r\n\r\n  for (var propName in rawJson[0]) {\r\n    arr[0].words.push(propName)\r\n  }\r\n\r\n  for (let i = 0; i < rawJson.length; i++) {\r\n    /* For storing total word count */\r\n    let tmp = []\r\n\r\n    /* Get total word count */\r\n    for (var propName in rawJson[i]) {\r\n      if (rawJson[i].hasOwnProperty(propName)) {\r\n        let v = parseInt(rawJson[i][propName]) // parse string to int\r\n        if (v >= 0) tmp.push(v) // get rid of blog name from word list\r\n      }\r\n    }\r\n\r\n    /* Store blog data in seperate objects */\r\n    arr[0]['blogs'].push({\r\n      name: rawJson[i]['Blog'],\r\n      wordsTotal: tmp,\r\n    })\r\n  }\r\n\r\n  arr[0].total = arr[0].words.length\r\n\r\n  return arr\r\n}\r\n\r\nexport default jsonResult\r\n"]},"metadata":{},"sourceType":"module"}