{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst buildJson = async (user, userMatch, movieRecommends) => {\n  user[0]['top_matching_users'] = userMatch;\n  user[0]['recommended_movies'] = movieRecommends.map(x => {\n    return {\n      title: x['title'],\n      id: x['movieId'],\n      score: x['wsSim']\n    };\n  });\n  return user;\n};\n\nconst weightedCalculations = async a => {\n  let arr = []; // array for concat\n\n  /* wsum */\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < a[i].length; j++) {\n      arr.push(a[i][j]);\n    }\n  }\n\n  let result = arr.reduce((accumulator, cur) => {\n    let id = cur.movieId;\n    let found = accumulator.find(elem => {\n      return elem.movieId == id;\n    });\n    /* If we find duplicates we do the weighted calculations */\n\n    if (found) {\n      found.ws += cur.ws; // sum score\n\n      found.sim += cur.sim; // sum sim for movie\n\n      found.wsSim = found.ws / found.sim; // end recommendation score\n    }\n    /* ... else we just push the single into the accumulator */\n    else {\n        accumulator.push(cur);\n      }\n\n    return accumulator; // return to result\n  }, []);\n  /* sort wsSim descending order */\n\n  result.sort((a, b) => parseFloat(b.wsSim) - parseFloat(a.wsSim));\n  return result;\n};\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\n\n\nconst weightedScore = async (a, score) => {\n  let arr = [];\n\n  for (let i = 0; i < a.length; i++) {\n    let wScore = a[i]['rating'] * score;\n    arr.push({\n      movieId: a[i]['movieId'],\n      title: a[i]['title'],\n      wScore: wScore,\n      ws: wScore,\n      sim: score,\n      wsSim: 0\n    });\n  }\n\n  return arr;\n};\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\n\n\nconst euclideanUser = async (a, b) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i]['movieId'] == b[j]['movieId']) {\n        sim += (a[i]['rating'] - b[j]['rating']) ** 2;\n        n += 1;\n      }\n    }\n  }\n\n  if (n == 0) {\n    return 0;\n  }\n\n  let inv = 1 / (1 + sim);\n  return inv;\n};\n\nconst pearsonCorrelation = async (a, b) => {\n  // let sum1 = 0,\n  //     sum2 = 0,\n  //     sum1sq = 0,\n  //     sum2sq = 0,\n  //     pSum = 0,\n  //     n = 0\n  // for (let i = 0; i < a.length; i++) {\n  //     for (let j = 0; j < a[i].length; i++) {\n  //         if (a[i]['movieId'] == b[j]['movieId']) {\n  //             sum1 += a[i]['rating']\n  //             sum2 += b[j]['rating']\n  //             sum1sq += a[i]['rating'] ** 2\n  //             sum2sq += b[j]['rating'] ** 2\n  //             pSum += a[i]['rating'] * b[j]['rating']\n  //             n += 1\n  //         }\n  //     }\n  // }\n  // if (n == 0) {\n  //     return 0\n  // }\n  // let num = pSum - (sum1 * sum2 / n)\n  // let den = Math.sqrt((sum1sq - sum1 ** 2 / n) * (sum2sq - sum2 ** 2 / n))\n  return a;\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  /* sql */\n\n  let user = await db.all('SELECT * FROM users where id = ?', [id]);\n  /* Retrieve ratings that belongs to main user */\n\n  let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  /* All other users */\n\n  let otherUsers = await db.all('SELECT name, id FROM users where id != ?', [id]);\n  let userSimilarity = []; // adding euclidean result here\n\n  let wScores = [];\n  let pc;\n  /* Getting the similarity between users */\n\n  for (let i = 0; i < otherUsers.length; i++) {\n    let subId = otherUsers[i]['id'];\n    let name = otherUsers[i]['name'];\n    /* Retrieve ratings for all the other users */\n\n    let otherUserRatings = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [subId]);\n    let euclideanScore = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\n\n    pc = await pearsonCorrelation(userRatings, otherUserRatings); // get euclidean score\n\n    /* Retrieve ratings for all the other users again, but now without the movies that main user has rated */\n\n    let otherUserRatings2 = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ? AND movieId NOT IN (SELECT ratings.movieId FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?)', [subId, id]);\n    let wScore = await weightedScore(otherUserRatings2, pc); // get weighter score\n\n    wScores.push({\n      weighted_scores: wScore\n    });\n    /* Push objects */\n\n    userSimilarity.push({\n      id: subId,\n      user_name: name,\n      score: pc\n    });\n  }\n  /* Sort similarity highest to lowest */\n\n\n  userSimilarity.sort((a, b) => parseFloat(b.score) - parseFloat(a.score));\n  let wCalc = await weightedCalculations(wScores.map(y => y['weighted_scores'])); // res.json(JSON.stringify(await buildJson(user, userSimilarity, wCalc), null, 2));\n\n  res.json(pc);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","buildJson","user","userMatch","movieRecommends","map","x","title","id","score","weightedCalculations","a","arr","i","length","j","push","result","reduce","accumulator","cur","movieId","found","find","elem","ws","sim","wsSim","sort","b","parseFloat","weightedScore","wScore","euclideanUser","n","inv","pearsonCorrelation","euclideanAPI","req","res","query","db","open","filename","driver","Database","all","userRatings","otherUsers","userSimilarity","wScores","pc","subId","name","otherUserRatings","euclideanScore","otherUserRatings2","weighted_scores","user_name","wCalc","y","json"],"mappings":"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","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst buildJson = async (user: Array<any>, userMatch: Array<any>, movieRecommends: Array<any>) => {\r\n\r\n    user[0]['top_matching_users'] = userMatch;\r\n\r\n    user[0]['recommended_movies'] = movieRecommends.map(x => {\r\n        return { title: x['title'], id: x['movieId'], score: x['wsSim'] }\r\n    });\r\n\r\n    return user;\r\n}\r\n\r\nconst weightedCalculations = async (a: Array<any>) => {\r\n    \r\n    let arr: Array<any> = []; // array for concat\r\n\r\n    /* wsum */\r\n    for (let i: number = 0; i < a.length; i++) {\r\n        for (let j: number = 0; j < a[i].length; j++) {\r\n            arr.push(a[i][j]);\r\n        }\r\n    }\r\n\r\n    let result = arr.reduce((accumulator, cur) => {\r\n\r\n        let id = cur.movieId;\r\n        \r\n        let found: any = accumulator.find((elem: { movieId: any; }) => {\r\n            return elem.movieId == id;\r\n        })\r\n\r\n        /* If we find duplicates we do the weighted calculations */\r\n        if (found) {\r\n            found.ws += cur.ws; // sum score\r\n            found.sim += cur.sim; // sum sim for movie\r\n            found.wsSim = found.ws / found.sim; // end recommendation score\r\n        }\r\n        /* ... else we just push the single into the accumulator */\r\n        else {\r\n            accumulator.push(cur)\r\n        }\r\n        \r\n        return accumulator; // return to result\r\n\r\n    }, []);\r\n\r\n    /* sort wsSim descending order */\r\n    result.sort((a: { wsSim: any; }, b: { wsSim: any; }) =>\r\n        parseFloat(b.wsSim) - parseFloat(a.wsSim)\r\n    ); \r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\r\nconst weightedScore = async (a: any, score: number) => {\r\n    let arr: Array<any> = [];\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        let wScore: number = a[i]['rating'] * score;\r\n\r\n        arr.push({\r\n            movieId: a[i]['movieId'],\r\n            title: a[i]['title'],\r\n            wScore: wScore,\r\n            ws: wScore,\r\n            sim: score,\r\n            wsSim: 0\r\n        });\r\n\r\n    }\r\n\r\n    return arr;\r\n}\r\n \r\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\r\nconst euclideanUser = async (a: any, b: any) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        for (let j = 0; j < b.length; j++) {\r\n            if (a[i]['movieId'] == b[j]['movieId']) {\r\n                sim += (a[i]['rating'] - b[j]['rating']) ** 2;\r\n                n += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (n == 0) {\r\n        return 0;\r\n    }\r\n\r\n    let inv: number = 1 / (1 + sim);\r\n\r\n    return inv;\r\n};\r\n\r\nconst pearsonCorrelation = async (a: any, b: any) => {\r\n    // let sum1 = 0,\r\n    //     sum2 = 0,\r\n    //     sum1sq = 0,\r\n    //     sum2sq = 0,\r\n    //     pSum = 0,\r\n    //     n = 0\r\n    \r\n    // for (let i = 0; i < a.length; i++) {\r\n    //     for (let j = 0; j < a[i].length; i++) {\r\n\r\n    //         if (a[i]['movieId'] == b[j]['movieId']) {\r\n    //             sum1 += a[i]['rating']\r\n    //             sum2 += b[j]['rating']\r\n\r\n    //             sum1sq += a[i]['rating'] ** 2\r\n    //             sum2sq += b[j]['rating'] ** 2\r\n\r\n    //             pSum += a[i]['rating'] * b[j]['rating']\r\n\r\n    //             n += 1\r\n    //         }\r\n\r\n    //     }\r\n    // }\r\n\r\n    // if (n == 0) {\r\n    //     return 0\r\n    // }\r\n\r\n    // let num = pSum - (sum1 * sum2 / n)\r\n    // let den = Math.sqrt((sum1sq - sum1 ** 2 / n) * (sum2sq - sum2 ** 2 / n))\r\n\r\n    return a;\r\n}\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id: any = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    /* sql */\r\n    let user: any = await db.all('SELECT * FROM users where id = ?', [id]);\r\n    /* Retrieve ratings that belongs to main user */\r\n    let userRatings: any = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    /* All other users */\r\n    let otherUsers: any = await db.all('SELECT name, id FROM users where id != ?', [id]);\r\n\r\n    let userSimilarity: Array<any> = []; // adding euclidean result here\r\n    let wScores: Array<any> = [];\r\n    let pc: any\r\n\r\n    /* Getting the similarity between users */\r\n    for (let i: number = 0; i < otherUsers.length; i++) {\r\n\r\n        let subId: number = otherUsers[i]['id'];\r\n        let name: String = otherUsers[i]['name'];\r\n\r\n        /* Retrieve ratings for all the other users */\r\n        let otherUserRatings: any = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [subId]);\r\n\r\n        let euclideanScore: any = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\r\n        pc = await pearsonCorrelation(userRatings, otherUserRatings); // get euclidean score\r\n\r\n        /* Retrieve ratings for all the other users again, but now without the movies that main user has rated */\r\n        let otherUserRatings2: any = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ? AND movieId NOT IN (SELECT ratings.movieId FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?)', [subId, id]);\r\n     \r\n        let wScore: any = await weightedScore(otherUserRatings2, pc); // get weighter score\r\n\r\n        wScores.push({weighted_scores: wScore});\r\n\r\n        /* Push objects */\r\n        userSimilarity.push({\r\n            id: subId,\r\n            user_name: name,\r\n            score: pc,\r\n        });\r\n        \r\n    }\r\n\r\n    /* Sort similarity highest to lowest */\r\n    userSimilarity.sort((a: { score: any; }, b: { score: any; }) =>\r\n    parseFloat(b.score) - parseFloat(a.score)\r\n    ); \r\n    \r\n    let wCalc = await weightedCalculations(wScores.map(y => y['weighted_scores']));\r\n\r\n    // res.json(JSON.stringify(await buildJson(user, userSimilarity, wCalc), null, 2));\r\n    res.json(pc);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}