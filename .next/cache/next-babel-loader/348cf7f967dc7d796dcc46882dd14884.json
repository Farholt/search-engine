{"ast":null,"code":"import { Centroid } from '../../shared/class/Centroid';\n\nconst {\n  range,\n  map,\n  pipe,\n  flip,\n  forEach: forE,\n  all: every\n} = require('ramda');\n\nconst {\n  reduce,\n  forEach\n} = require('list/curried');\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst getWordRange = blogs => i => reduce((r, blog) => ({\n  min: Math.min(r.min, blog.wordsTotal[i]),\n  max: Math.max(r.max, blog.wordsTotal[i])\n}), {\n  min: Infinity,\n  max: -Infinity\n}, blogs);\n\nconst initCentroids = k => ranges => {\n  const centroids = [];\n\n  for (let i = 0; i < k; i++) {\n    centroids[i] = new Centroid();\n    ranges.forEach(({\n      min,\n      max\n    }, idx) => centroids[i].setTotalWords(idx, random(min)(max)));\n  }\n\n  return centroids;\n};\n\nconst assignToCentroid = wordCount => blogs => centroids => {};\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5;\n  const MAX_ITERATIONS = 50;\n  let k = random(1)(20);\n  const n = 706;\n  const centroids = initCentroids(CLUSTERS)(5);\n  res.json(centroids);\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["Centroid","range","map","pipe","flip","forEach","forE","all","every","require","reduce","random","from","to","Math","getWordRange","blogs","i","r","blog","min","wordsTotal","max","Infinity","initCentroids","k","ranges","centroids","idx","setTotalWords","assignToCentroid","wordCount","kMean","req","res","CLUSTERS","MAX_ITERATIONS","n","json"],"mappings":"AAGA,SAASA,QAAT,QAAyB,6BAAzB;;AAGA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,OAAO,EAAEC,IAAnC;AAAyCC,EAAAA,GAAG,EAAEC;AAA9C,IAAwDC,OAAO,CAAC,OAAD,CAArE;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUL,EAAAA;AAAV,IAAsBI,OAAO,CAAC,cAAD,CAAnC;;AAEA,MAAME,MAAM,GAAIC,IAAD,IAAmBC,EAAD,IAC/BD,IAAI,GAAGE,IAAI,CAACH,MAAL,MAAiBE,EAAE,GAAGD,IAAtB,CADT;;AAGA,MAAMG,YAAY,GAAIC,KAAD,IAAYC,CAAD,IAC9BP,MAAM,CACJ,CAACQ,CAAD,EAAIC,IAAJ,MAAc;AACZC,EAAAA,GAAG,EAAEN,IAAI,CAACM,GAAL,CAASF,CAAC,CAACE,GAAX,EAAgBD,IAAI,CAACE,UAAL,CAAgBJ,CAAhB,CAAhB,CADO;AAEZK,EAAAA,GAAG,EAAER,IAAI,CAACQ,GAAL,CAASJ,CAAC,CAACI,GAAX,EAAgBH,IAAI,CAACE,UAAL,CAAgBJ,CAAhB,CAAhB;AAFO,CAAd,CADI,EAKJ;AAAEG,EAAAA,GAAG,EAAEG,QAAP;AAAiBD,EAAAA,GAAG,EAAE,CAACC;AAAvB,CALI,EAMJP,KANI,CADR;;AAUA,MAAMQ,aAAa,GAAIC,CAAD,IAAQC,MAAD,IAAY;AACvC,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,CAApB,EAAuBR,CAAC,EAAxB,EAA4B;AAC1BU,IAAAA,SAAS,CAACV,CAAD,CAAT,GAAe,IAAIjB,QAAJ,EAAf;AACA0B,IAAAA,MAAM,CAACrB,OAAP,CAAe,CAAC;AAAEe,MAAAA,GAAF;AAAOE,MAAAA;AAAP,KAAD,EAAeM,GAAf,KACbD,SAAS,CAACV,CAAD,CAAT,CAAaY,aAAb,CAA2BD,GAA3B,EAAgCjB,MAAM,CAACS,GAAD,CAAN,CAAYE,GAAZ,CAAhC,CADF;AAGD;;AAED,SAAOK,SAAP;AACD,CAXD;;AAaA,MAAMG,gBAAgB,GAAIC,SAAD,IAAgBf,KAAD,IAAYW,SAAD,IAAe,CAAE,CAApE;;AAEA,MAAMK,KAAK,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC3D,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIX,CAAC,GAAGd,MAAM,CAAC,CAAD,CAAN,CAAU,EAAV,CAAR;AACA,QAAM0B,CAAC,GAAG,GAAV;AAEA,QAAMV,SAAS,GAAGH,aAAa,CAACW,QAAD,CAAb,CAAwB,CAAxB,CAAlB;AAEAD,EAAAA,GAAG,CAACI,IAAJ,CAASX,SAAT;AACD,CATD;;AAWA,eAAeK,KAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst { range, map, pipe, flip, forEach: forE, all: every } = require('ramda')\r\nconst { reduce, forEach } = require('list/curried')\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst getWordRange = (blogs) => (i) =>\r\n  reduce(\r\n    (r, blog) => ({\r\n      min: Math.min(r.min, blog.wordsTotal[i]),\r\n      max: Math.max(r.max, blog.wordsTotal[i]),\r\n    }),\r\n    { min: Infinity, max: -Infinity },\r\n    blogs\r\n  )\r\n\r\nconst initCentroids = (k) => (ranges) => {\r\n  const centroids = []\r\n\r\n  for (let i = 0; i < k; i++) {\r\n    centroids[i] = new Centroid()\r\n    ranges.forEach(({ min, max }, idx) =>\r\n      centroids[i].setTotalWords(idx, random(min)(max))\r\n    )\r\n  }\r\n\r\n  return centroids\r\n}\r\n\r\nconst assignToCentroid = (wordCount) => (blogs) => (centroids) => {}\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS = 5\r\n  const MAX_ITERATIONS = 50\r\n  let k = random(1)(20)\r\n  const n = 706\r\n\r\n  const centroids = initCentroids(CLUSTERS)(5)\r\n\r\n  res.json(centroids)\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}