{"ast":null,"code":"import jsonResult from '../../shared/functions/convertDatasetToJson';\nimport { Centroid } from '../../shared/class/Centroid';\nimport pearson from '../../shared/functions/pearson';\n\nconst {\n  range,\n  map,\n  pipe,\n  flip,\n  forEach: forE,\n  all: every\n} = require('ramda');\n\nconst {\n  reduce,\n  forEach\n} = require('list/curried');\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5;\n  const MAX_ITERATIONS = 50;\n  const n = 706;\n  const centroids = [];\n\n  for (let i = 0; i < CLUSTERS; i++) {\n    centroids[i] = new Centroid();\n\n    for (let j = 0; j < n; j++) {\n      centroids[i].setWordCount(j, random(i)(20));\n    }\n  }\n\n  const blogs = jsonResult()[0].blogs;\n\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\n    centroids.forEach(e => e.clearAssignments());\n\n    for (let j = 0; j < blogs.length; j++) {\n      let distance = Infinity;\n      let best; // best\n\n      for (let k = 0; k < centroids.length; k++) {\n        const cDist = pearson(centroids[k], blogs[j]);\n\n        if (cDist < distance) {\n          best = centroids[k];\n          distance = cDist;\n        }\n      }\n\n      best.assign(blogs[j]);\n    }\n\n    for (let y = 0; y < centroids.length; y++) {\n      for (let l = 0; l < n; l++) {\n        var avg = 0;\n\n        for (let j = 0; j < centroids[y]['assignments'].length; j++) {\n          avg += centroids[y]['assignments'][j].wordCount[l];\n        }\n\n        avg /= centroids[y]['assignments'].length;\n        centroids[y].setWordCount(l, avg);\n      }\n    }\n  }\n\n  let arr = centroids.map(x => x.assignments.map(y => y.name));\n  res.json(JSON.stringify(arr, null, 2));\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["jsonResult","Centroid","pearson","range","map","pipe","flip","forEach","forE","all","every","require","reduce","random","from","to","Math","kMean","req","res","CLUSTERS","MAX_ITERATIONS","n","centroids","i","j","setWordCount","blogs","e","clearAssignments","length","distance","Infinity","best","k","cDist","assign","y","l","avg","wordCount","arr","x","assignments","name","json","JSON","stringify"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst { range, map, pipe, flip, forEach: forE, all: every } = require('ramda')\r\nconst { reduce, forEach } = require('list/curried')\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS: number = 5\r\n  const MAX_ITERATIONS: number = 50\r\n  const n: number = 706\r\n\r\n  const centroids: Array<any> = []\r\n\r\n  for (let i = 0; i < CLUSTERS; i++) {\r\n    centroids[i] = new Centroid()\r\n    for (let j = 0; j < n; j++) {\r\n      centroids[i].setWordCount(j, random(i)(20))\r\n    }\r\n  }\r\n\r\n  const blogs = jsonResult()[0].blogs\r\n\r\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\r\n    centroids.forEach((e) => e.clearAssignments())\r\n\r\n    for (let j = 0; j < blogs.length; j++) {\r\n      let distance: number = Infinity\r\n      let best: any // best\r\n\r\n      for (let k = 0; k < centroids.length; k++) {\r\n        const cDist: number = pearson(centroids[k], blogs[j])\r\n        if (cDist < distance) {\r\n          best = centroids[k]\r\n          distance = cDist\r\n        }\r\n      }\r\n      best.assign(blogs[j])\r\n    }\r\n\r\n    for (let y = 0; y < centroids.length; y++) {\r\n      for (let l = 0; l < n; l++) {\r\n        var avg: number = 0\r\n        for (let j = 0; j < centroids[y]['assignments'].length; j++) {\r\n          avg += centroids[y]['assignments'][j].wordCount[l]\r\n        }\r\n        avg /= centroids[y]['assignments'].length\r\n        centroids[y].setWordCount(l, avg)\r\n      }\r\n    }\r\n  }\r\n\r\n  let arr = centroids.map((x) => x.assignments.map((y) => y.name))\r\n\r\n  res.json(JSON.stringify(arr, null, 2))\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}