{"ast":null,"code":"const {\n  range,\n  map,\n  pipe,\n  flip,\n  forEach: forE,\n  all: every\n} = require('ramda');\n\nconst {\n  reduce,\n  forEach\n} = require('list/curried');\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst assignToCentroid = wordCount => blogs => centroids => {};\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5;\n  const MAX_ITERATIONS = 50;\n  let k = random(1)(20);\n  const n = 706;\n  const centroids = initCentroids(CLUSTERS)(8);\n  res.json(centroids);\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["range","map","pipe","flip","forEach","forE","all","every","require","reduce","random","from","to","Math","assignToCentroid","wordCount","blogs","centroids","kMean","req","res","CLUSTERS","MAX_ITERATIONS","k","n","initCentroids","json"],"mappings":"AAMA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,OAAO,EAAEC,IAAnC;AAAyCC,EAAAA,GAAG,EAAEC;AAA9C,IAAwDC,OAAO,CAAC,OAAD,CAArE;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUL,EAAAA;AAAV,IAAsBI,OAAO,CAAC,cAAD,CAAnC;;AAEA,MAAME,MAAM,GAAIC,IAAD,IAAmBC,EAAD,IAC/BD,IAAI,GAAGE,IAAI,CAACH,MAAL,MAAiBE,EAAE,GAAGD,IAAtB,CADT;;AAGA,MAAMG,gBAAgB,GAAIC,SAAD,IAAgBC,KAAD,IAAYC,SAAD,IAAe,CAAE,CAApE;;AAEA,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC3D,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,CAAC,GAAGb,MAAM,CAAC,CAAD,CAAN,CAAU,EAAV,CAAR;AACA,QAAMc,CAAC,GAAG,GAAV;AAEA,QAAMP,SAAS,GAAGQ,aAAa,CAACJ,QAAD,CAAb,CAAwB,CAAxB,CAAlB;AAEAD,EAAAA,GAAG,CAACM,IAAJ,CAAST,SAAT;AACD,CATD;;AAWA,eAAeC,KAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst { range, map, pipe, flip, forEach: forE, all: every } = require('ramda')\r\nconst { reduce, forEach } = require('list/curried')\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst assignToCentroid = (wordCount) => (blogs) => (centroids) => {}\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS = 5\r\n  const MAX_ITERATIONS = 50\r\n  let k = random(1)(20)\r\n  const n = 706\r\n\r\n  const centroids = initCentroids(CLUSTERS)(8)\r\n\r\n  res.json(centroids)\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}