{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst euclidean = async (A, B) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < A.length; i++) {\n    for (let j = 0; j < B.length; j++) {\n      if (A[i]['movieId'] == B[j]['movieId']) {\n        sim += (A[i]['rating'] - B[j]['rating']) ** 2;\n        n += 1;\n      }\n    }\n  }\n\n  if (n == 0) {\n    return 0;\n  }\n\n  let inv = 1 / (1 + sim);\n  return inv;\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  let user = await db.all('SELECT * FROM users where id = ?', [id]);\n  /* Retrieve ratings that belongs to main user */\n\n  let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  let otherUsers = await db.all('SELECT id FROM users where id != ?', [id]);\n  otherUsers.map((x, i) => {\n    return otherUsers[i]['titles'] = [];\n  });\n  /* Retrieve ratings for all the other users */\n\n  let ratings2 = await db.all('SELECT ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [3]);\n  let name = ratings2[0]['userId'];\n  let euclideanResult = await euclidean(userRatings, ratings2);\n  user[0]['user_similarity'] = [{\n    [name]: euclideanResult\n  }];\n  user = JSON.stringify(user, null, 2); // res.json(userRatings);\n\n  res.json(otherUsers);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","euclidean","A","B","sim","n","i","length","j","inv","euclideanAPI","req","res","id","query","db","open","filename","driver","Database","user","all","userRatings","otherUsers","map","x","ratings2","name","euclideanResult","JSON","stringify","json"],"mappings":"AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAME,SAAS,GAAG,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC9B,MAAIC,GAAW,GAAG,CAAlB,CAD8B,CACT;;AACrB,MAAIC,CAAS,GAAG,CAAhB,CAF8B,CAEX;;AAEnB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAAC,CAACK,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACI,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AAE/B,UAAIN,CAAC,CAACI,CAAD,CAAD,CAAK,SAAL,KAAmBH,CAAC,CAACK,CAAD,CAAD,CAAK,SAAL,CAAvB,EAAwC;AACpCJ,QAAAA,GAAG,IAAI,CAACF,CAAC,CAACI,CAAD,CAAD,CAAK,QAAL,IAAiBH,CAAC,CAACK,CAAD,CAAD,CAAK,QAAL,CAAlB,KAAqC,CAA5C;AACAH,QAAAA,CAAC,IAAI,CAAL;AACH;AAEJ;AACJ;;AAED,MAAIA,CAAC,IAAI,CAAT,EAAY;AACR,WAAO,CAAP;AACH;;AAED,MAAII,GAAG,GAAG,KAAK,IAAIL,GAAT,CAAV;AAEA,SAAOK,GAAP;AACH,CAtBD;;AAwBA,MAAMC,YAAY,GAAG,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACtE,QAAMC,EAAE,GAAGF,GAAG,CAACG,KAAJ,CAAUD,EAArB,CADsE,CAC7C;;AAEzB;;AACA,QAAME,EAAE,GAAG,MAAMf,MAAM,CAACgB,IAAP,CAAY;AACzBC,IAAAA,QAAQ,EAAE,eADe;AAEzBC,IAAAA,MAAM,EAAEpB,OAAO,CAACqB;AAFS,GAAZ,CAAjB;AAKA,MAAIC,IAAI,GAAG,MAAML,EAAE,CAACM,GAAH,CAAO,kCAAP,EAA2C,CAACR,EAAD,CAA3C,CAAjB;AAEA;;AACA,MAAIS,WAAW,GAAG,MAAMP,EAAE,CAACM,GAAH,CAAO,mJAAP,EAA4J,CAACR,EAAD,CAA5J,CAAxB;AAEA,MAAIU,UAAU,GAAG,MAAMR,EAAE,CAACM,GAAH,CAAO,oCAAP,EAA6C,CAACR,EAAD,CAA7C,CAAvB;AAIAU,EAAAA,UAAU,CAACC,GAAX,CAAe,CAACC,CAAD,EAAInB,CAAJ,KAAU;AAIrB,WAAOiB,UAAU,CAACjB,CAAD,CAAV,CAAc,QAAd,IAA0B,EAAjC;AACH,GALD;AAQA;;AACA,MAAIoB,QAAQ,GAAG,MAAMX,EAAE,CAACM,GAAH,CAAO,qIAAP,EAA8I,CAAC,CAAD,CAA9I,CAArB;AACA,MAAIM,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAY,QAAZ,CAAX;AAEA,MAAIE,eAAe,GAAG,MAAM3B,SAAS,CAACqB,WAAD,EAAcI,QAAd,CAArC;AAEAN,EAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,iBAAR,IAA6B,CAAC;AACtB,KAACO,IAAD,GAAQC;AADc,GAAD,CAA7B;AAIAR,EAAAA,IAAI,GAAGS,IAAI,CAACC,SAAL,CAAeV,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP,CApCsE,CAqCtE;;AACAR,EAAAA,GAAG,CAACmB,IAAJ,CAASR,UAAT;AACH,CAvCD;;AAyCA,eAAeb,YAAf","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst euclidean = async (A, B) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < A.length; i++) {\r\n        for (let j = 0; j < B.length; j++) {\r\n\r\n            if (A[i]['movieId'] == B[j]['movieId']) {\r\n                sim += (A[i]['rating'] - B[j]['rating']) ** 2;\r\n                n += 1;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    if (n == 0) {\r\n        return 0;\r\n    }\r\n\r\n    let inv = 1 / (1 + sim);\r\n\r\n    return inv;\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    let user = await db.all('SELECT * FROM users where id = ?', [id]);\r\n\r\n    /* Retrieve ratings that belongs to main user */\r\n    let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    let otherUsers = await db.all('SELECT id FROM users where id != ?', [id]);\r\n\r\n    \r\n\r\n    otherUsers.map((x, i) => {\r\n\r\n\r\n\r\n        return otherUsers[i]['titles'] = [];\r\n    })\r\n\r\n\r\n    /* Retrieve ratings for all the other users */\r\n    let ratings2 = await db.all('SELECT ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [3]);\r\n    let name = ratings2[0]['userId'];\r\n\r\n    let euclideanResult = await euclidean(userRatings, ratings2);\r\n\r\n    user[0]['user_similarity'] = [{\r\n            [name]: euclideanResult\r\n        }];\r\n\r\n    user = JSON.stringify(user, null, 2);\r\n    // res.json(userRatings);\r\n    res.json(otherUsers);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}