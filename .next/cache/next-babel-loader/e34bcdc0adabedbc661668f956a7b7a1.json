{"ast":null,"code":"import jsonResult from '../../shared/functions/convertDatasetToJson';\nimport { Centroid } from '../../shared/class/Centroid';\n\nconst {\n  range,\n  map,\n  pipe,\n  flip,\n  forEach: forE,\n  all: every\n} = require('ramda');\n\nconst {\n  reduce,\n  forEach\n} = require('list/curried');\n\nconst random = from => to => from + Math.random() * (to - from);\n\nconst kMean = (req, res) => {\n  const CLUSTERS = 5;\n  const MAX_ITERATIONS = 50;\n  let k = random(1)(20);\n  const n = 706;\n  const centroids = [];\n\n  for (let i = 0; i < k; i++) {\n    centroids[i] = new Centroid();\n\n    for (let j = 0; j < n; j++) {\n      centroids[i].setTotalWords(j, random(1)(100));\n    }\n  }\n\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\n    centroids.forEach(e => e.clearAssignments());\n\n    for (let b in jsonResult()[0].blogs) {\n      let distance = Infinity;\n      let closest; // best\n\n      for (let c in centroids) {// const cDist = pearson(b, c)\n        //   if (cDist < distance) {\n        //     closest = c\n        //     distance = cDist\n        //   }\n      }\n\n      centroids[i].assign('bajs');\n    }\n  } // res.json(JSON.stringify(jsonResult()[0].blogs, null, 2))\n\n\n  res.json(JSON.stringify(centroids, null, 2));\n};\n\nexport default kMean;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A2/pages/api/blog.ts"],"names":["jsonResult","Centroid","range","map","pipe","flip","forEach","forE","all","every","require","reduce","random","from","to","Math","kMean","req","res","CLUSTERS","MAX_ITERATIONS","k","n","centroids","i","j","setTotalWords","e","clearAssignments","b","blogs","distance","Infinity","closest","c","assign","json","JSON","stringify"],"mappings":"AACA,OAAOA,UAAP,MAAuB,6CAAvB;AAEA,SAASC,QAAT,QAAyB,6BAAzB;;AAGA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA,GAAT;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,OAAO,EAAEC,IAAnC;AAAyCC,EAAAA,GAAG,EAAEC;AAA9C,IAAwDC,OAAO,CAAC,OAAD,CAArE;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUL,EAAAA;AAAV,IAAsBI,OAAO,CAAC,cAAD,CAAnC;;AAEA,MAAME,MAAM,GAAIC,IAAD,IAAmBC,EAAD,IAC/BD,IAAI,GAAGE,IAAI,CAACH,MAAL,MAAiBE,EAAE,GAAGD,IAAtB,CADT;;AAGA,MAAMG,KAAK,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC3D,QAAMC,QAAQ,GAAG,CAAjB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,CAAC,GAAGT,MAAM,CAAC,CAAD,CAAN,CAAU,EAAV,CAAR;AACA,QAAMU,CAAC,GAAG,GAAV;AAEA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1BD,IAAAA,SAAS,CAACC,CAAD,CAAT,GAAe,IAAIvB,QAAJ,EAAf;;AACA,SAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC1BF,MAAAA,SAAS,CAACC,CAAD,CAAT,CAAaE,aAAb,CAA2BD,CAA3B,EAA8Bb,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAA9B;AACD;AACF;;AAED,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,cAApB,EAAoCI,CAAC,EAArC,EAAyC;AACvCD,IAAAA,SAAS,CAACjB,OAAV,CAAmBqB,CAAD,IAAOA,CAAC,CAACC,gBAAF,EAAzB;;AAEA,SAAK,IAAIC,CAAT,IAAc7B,UAAU,GAAG,CAAH,CAAV,CAAgB8B,KAA9B,EAAqC;AACnC,UAAIC,QAAQ,GAAGC,QAAf;AACA,UAAIC,OAAJ,CAFmC,CAEvB;;AAEZ,WAAK,IAAIC,CAAT,IAAcX,SAAd,EAAyB,CACvB;AACA;AACA;AACA;AACA;AACD;;AAEDA,MAAAA,SAAS,CAACC,CAAD,CAAT,CAAaW,MAAb,CAAoB,MAApB;AACD;AACF,GAhC0D,CAkC3D;;;AACAjB,EAAAA,GAAG,CAACkB,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAef,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAT;AACD,CApCD;;AAsCA,eAAeP,KAAf","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\r\nimport jsonResult from '../../shared/functions/convertDatasetToJson'\r\n\r\nimport { Centroid } from '../../shared/class/Centroid'\r\nimport pearson from '../../shared/functions/pearson'\r\n\r\nconst { range, map, pipe, flip, forEach: forE, all: every } = require('ramda')\r\nconst { reduce, forEach } = require('list/curried')\r\n\r\nconst random = (from: number) => (to: number) =>\r\n  from + Math.random() * (to - from)\r\n\r\nconst kMean = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const CLUSTERS = 5\r\n  const MAX_ITERATIONS = 50\r\n  let k = random(1)(20)\r\n  const n = 706\r\n\r\n  const centroids = []\r\n\r\n  for (let i = 0; i < k; i++) {\r\n    centroids[i] = new Centroid()\r\n    for (let j = 0; j < n; j++) {\r\n      centroids[i].setTotalWords(j, random(1)(100))\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\r\n    centroids.forEach((e) => e.clearAssignments())\r\n\r\n    for (let b in jsonResult()[0].blogs) {\r\n      let distance = Infinity\r\n      let closest // best\r\n\r\n      for (let c in centroids) {\r\n        // const cDist = pearson(b, c)\r\n        //   if (cDist < distance) {\r\n        //     closest = c\r\n        //     distance = cDist\r\n        //   }\r\n      }\r\n\r\n      centroids[i].assign('bajs')\r\n    }\r\n  }\r\n\r\n  // res.json(JSON.stringify(jsonResult()[0].blogs, null, 2))\r\n  res.json(JSON.stringify(centroids, null, 2))\r\n}\r\n\r\nexport default kMean\r\n"]},"metadata":{},"sourceType":"module"}