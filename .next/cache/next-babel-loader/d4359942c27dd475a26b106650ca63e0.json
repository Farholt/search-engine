{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n/**\r\n * Calculating weighte score\r\n * @param a \r\n */\n\n\nconst weightedScore = async (a, score) => {\n  let arr = [];\n\n  for (let i = 0; i < a.length; i++) {\n    let wScore = a[i]['rating'] * score;\n    arr.push({\n      movieId: a[i]['movieId'],\n      wScore: wScore\n    });\n  }\n\n  return arr;\n};\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\n\n\nconst euclideanUser = async (a, b) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i]['movieId'] == b[j]['movieId']) {\n        sim += (a[i]['rating'] - b[j]['rating']) ** 2;\n        n += 1;\n      }\n    }\n  }\n\n  if (n == 0) {\n    return 0;\n  }\n\n  let inv = 1 / (1 + sim);\n  return (Math.round(inv * 100) / 100).toFixed(2);\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  let user = await db.all('SELECT * FROM users where id = ?', [id]);\n  /* Retrieve ratings that belongs to main user */\n\n  let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  let userSimilarity = []; // adding euclidean result here\n\n  let otherUsers = await db.all('SELECT name, id FROM users where id != ?', [id]);\n  /* Getting the similarity between users */\n\n  for (let i = 0; i < otherUsers.length; i++) {\n    let id = otherUsers[i]['id'];\n    let name = otherUsers[i]['name'];\n    /* Retrieve ratings for all the other users */\n\n    let otherUserRatings = await db.all('SELECT ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n    let euclideanScore = await euclideanUser(userRatings, otherUserRatings);\n    let wScore = await weightedScore(otherUserRatings, euclideanScore);\n    /* Push objects */\n\n    userSimilarity.push({\n      id: id,\n      user_name: name,\n      score: euclideanScore,\n      weighted_scores: wScore // high score = more similar\n\n    });\n  }\n  /* Push array with user objects */\n\n\n  user[0]['user_similarity'] = userSimilarity;\n  user = JSON.stringify(user, null, 2);\n  res.json(user);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","weightedScore","a","score","arr","i","length","wScore","push","movieId","euclideanUser","b","sim","n","j","inv","Math","round","toFixed","euclideanAPI","req","res","id","query","db","open","filename","driver","Database","user","all","userRatings","userSimilarity","otherUsers","name","otherUserRatings","euclideanScore","user_name","weighted_scores","JSON","stringify","json"],"mappings":"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","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\n/**\r\n * Calculating weighte score\r\n * @param a \r\n */\r\nconst weightedScore = async (a: any, score: number) => {\r\n    \r\n    let arr: Array<any> = [];\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        let wScore: number = a[i]['rating'] * score;\r\n\r\n        arr.push({\r\n            movieId: a[i]['movieId'],\r\n            wScore: wScore\r\n        })\r\n    }\r\n\r\n    return arr;\r\n}\r\n \r\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\r\nconst euclideanUser = async (a: any, b: any) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        for (let j = 0; j < b.length; j++) {\r\n\r\n            if (a[i]['movieId'] == b[j]['movieId']) {\r\n                sim += (a[i]['rating'] - b[j]['rating']) ** 2;\r\n                n += 1;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    if (n == 0) {\r\n        return 0;\r\n    }\r\n\r\n    let inv: number = 1 / (1 + sim);\r\n\r\n    return (Math.round(inv * 100) / 100).toFixed(2);\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id: any = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    let user: any = await db.all('SELECT * FROM users where id = ?', [id]);\r\n    /* Retrieve ratings that belongs to main user */\r\n    let userRatings: any = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    let userSimilarity: Array<any> = []; // adding euclidean result here\r\n\r\n    let otherUsers: any = await db.all('SELECT name, id FROM users where id != ?', [id]);\r\n\r\n    /* Getting the similarity between users */\r\n    for (let i: number = 0; i < otherUsers.length; i++) {\r\n\r\n        let id: number = otherUsers[i]['id'];\r\n        let name: String = otherUsers[i]['name'];\r\n\r\n        /* Retrieve ratings for all the other users */\r\n        let otherUserRatings: any = await db.all('SELECT ratings.movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n     \r\n        let euclideanScore: any = await euclideanUser(userRatings, otherUserRatings);\r\n        let wScore: any = await weightedScore(otherUserRatings, euclideanScore);\r\n      \r\n        /* Push objects */\r\n        userSimilarity.push({\r\n            id: id,\r\n            user_name: name,\r\n            score: euclideanScore,\r\n            weighted_scores: wScore // high score = more similar\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    /* Push array with user objects */\r\n    user[0]['user_similarity'] = userSimilarity;\r\n\r\n    user = JSON.stringify(user, null, 2);\r\n    res.json(user);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}