{"ast":null,"code":"const getFrequencyScore = (p, query) => {\n  return null;\n};\n\nconst search = (req, res) => {\n  const query = req.body.query;\n\n  const fs = require('fs');\n\n  const str = fs.readFileSync('shared/json/pages.json').toString();\n  let obj = JSON.parse(str);\n  let result = [];\n  let scores = {\n    content: {},\n    location: {}\n  };\n\n  for (let i = 0; i < obj.length; i++) {\n    let p = obj[i]; // this is the page object\n\n    /* Here comes the frequence metric function */\n\n    scores.content[i] = getFrequencyScore(p, query);\n    if (i == 3) break;\n  }\n\n  res.json(scores);\n};\n\nexport default search;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A3/pages/api/search.ts"],"names":["getFrequencyScore","p","query","search","req","res","body","fs","require","str","readFileSync","toString","obj","JSON","parse","result","scores","content","location","i","length","json"],"mappings":"AAIA,MAAMA,iBAAiB,GAAG,CAACC,CAAD,EAAYC,KAAZ,KAAsC;AAC9D,SAAO,IAAP;AACD,CAFD;;AAIA,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,QAAMH,KAAU,GAAGE,GAAG,CAACE,IAAJ,CAASJ,KAA5B;;AAEA,QAAMK,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAMC,GAAW,GAAGF,EAAE,CAACG,YAAH,CAAgB,wBAAhB,EAA0CC,QAA1C,EAApB;AACA,MAAIC,GAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWL,GAAX,CAAzB;AAEA,MAAIM,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG;AAAEC,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,QAAQ,EAAE;AAAzB,GAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAAG,CAACQ,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIlB,CAAC,GAAGW,GAAG,CAACO,CAAD,CAAX,CADmC,CACpB;;AAEf;;AACAH,IAAAA,MAAM,CAACC,OAAP,CAAeE,CAAf,IAAoBnB,iBAAiB,CAACC,CAAD,EAAIC,KAAJ,CAArC;AAEA,QAAIiB,CAAC,IAAI,CAAT,EAAY;AACb;;AAEDd,EAAAA,GAAG,CAACgB,IAAJ,CAASL,MAAT;AACD,CApBD;;AAsBA,eAAeb,MAAf","sourcesContent":["import { strict } from 'assert'\r\nimport { forEach } from 'list'\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\n\r\nconst getFrequencyScore = (p: object, query: string): number => {\r\n  return null\r\n}\r\n\r\nconst search = (req: NextApiRequest, res: NextApiResponse) => {\r\n  const query: any = req.body.query\r\n\r\n  const fs = require('fs')\r\n  const str: string = fs.readFileSync('shared/json/pages.json').toString()\r\n  let obj: Array<object> = JSON.parse(str)\r\n\r\n  let result = []\r\n  let scores = { content: {}, location: {} }\r\n\r\n  for (let i = 0; i < obj.length; i++) {\r\n    let p = obj[i] // this is the page object\r\n\r\n    /* Here comes the frequence metric function */\r\n    scores.content[i] = getFrequencyScore(p, query)\r\n\r\n    if (i == 3) break\r\n  }\r\n\r\n  res.json(scores)\r\n}\r\n\r\nexport default search\r\n"]},"metadata":{},"sourceType":"module"}