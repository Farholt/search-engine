{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\fredr\\\\Documents\\\\Universitet\\\\HT20\\\\2DV515 - Web Intelligence\\\\A1\\\\pages\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/* Lib */\nimport cx from 'classnames';\nimport { useState } from 'react';\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState(null),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoaded = _useState2[0],\n      setIsLoaded = _useState2[1];\n\n  var _useState3 = useState([]),\n      users = _useState3[0],\n      setUsers = _useState3[1];\n\n  var _useState4 = useState(1),\n      target = _useState4[0],\n      setTarget = _useState4[1];\n\n  var _useState5 = useState(0),\n      sim = _useState5[0],\n      setSim = _useState5[1];\n\n  var fetchUsers = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fetch('/api/users').then(function (res) {\n                return res.json();\n              }).then(function (result) {\n                setIsLoaded(true);\n                setUsers(result);\n                console.log(result);\n              }, function (error) {\n                setIsLoaded(true);\n                setError(error);\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchUsers() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // useEffect(() => {\n  //     fetch('/api/users')\n  //         .then(res => res.json())\n  //         .then(\n  //             (result) => {\n  //                 setIsLoaded(true);\n  //                 setUsers(result);\n  //                 console.log(result);\n  //             },\n  //             (error) => {\n  //                 setIsLoaded(true);\n  //                 setError(error);\n  //             }\n  //     )\n  // })\n\n\n  var handleUserChange = function handleUserChange(e) {\n    setTarget(e.target.value);\n  };\n\n  var handleSimChange = function handleSimChange(e) {\n    setSim(e.target.value);\n  };\n\n  var simList = [{\n    value: 1,\n    description: 'Euclidean'\n  }, {\n    value: 2,\n    description: 'Pearson Colleration'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx(['container'], ['m-5']),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(['row']),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(['col-sm']),\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"custom-select\",\n          onChange: handleUserChange,\n          children: users.map(function (u, i) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: u.id,\n              children: [u.id, \": \", u.name]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 59\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(['col-sm']),\n        onChange: handleSimChange,\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"custom-select\",\n          children: simList.map(function (sim, i) {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i,\n              children: sim.description\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 63\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Index, \"OJ0UDFZ/ielQN4TmC33zBa8PtFg=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/index.tsx"],"names":["cx","useState","Index","error","setError","isLoaded","setIsLoaded","users","setUsers","target","setTarget","sim","setSim","fetchUsers","fetch","then","res","json","result","console","log","handleUserChange","e","value","handleSimChange","simList","description","map","u","i","id","name"],"mappings":"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","sourcesContent":["/* Lib */\r\nimport cx from 'classnames';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Index = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [users, setUsers] = useState([]);\r\n    const [target, setTarget] = useState(1);\r\n    const [sim, setSim] = useState(0);\r\n\r\n    const fetchUsers = async () => {\r\n                fetch('/api/users')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setIsLoaded(true);\r\n                    setUsers(result);\r\n                    console.log(result);\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n        )\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     fetch('/api/users')\r\n    //         .then(res => res.json())\r\n    //         .then(\r\n    //             (result) => {\r\n    //                 setIsLoaded(true);\r\n    //                 setUsers(result);\r\n    //                 console.log(result);\r\n    //             },\r\n    //             (error) => {\r\n    //                 setIsLoaded(true);\r\n    //                 setError(error);\r\n    //             }\r\n    //     )\r\n    // })\r\n\r\n    const handleUserChange = (e: any) => {\r\n        setTarget(e.target.value);\r\n    }\r\n\r\n    const handleSimChange = (e: any) => {\r\n        setSim(e.target.value);\r\n    }\r\n\r\n    let simList = [{ value: 1, description: 'Euclidean' }, { value: 2, description: 'Pearson Colleration' }];\r\n\r\n    return (\r\n        <div className={cx(['container'], ['m-5'])}>\r\n            <div className={cx(['row'])}>\r\n                <div className={cx(['col-sm'])}>\r\n                    <select className=\"custom-select\" onChange={handleUserChange}>\r\n                        {users.map((u: any, i: number) => <option value={u.id} key={i}>{u.id}: {u.name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div className={cx(['col-sm'])} onChange={handleSimChange}>\r\n                    <select className=\"custom-select\">\r\n                        {simList.map((sim: any, i: number) => <option value={i} key={i}>{sim.description}</option>)}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}