{"ast":null,"code":"const sqlite3 = require('sqlite3');\n\nconst sqlite = require('sqlite');\n\nconst buildJson = async (user, userMatch, movieRecommends) => {\n  return user;\n};\n\nconst weightedCalculations = async a => {\n  let arr = []; // array for concat\n\n  /* wsum */\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < a[i].length; j++) {\n      arr.push(a[i][j]);\n    }\n  }\n\n  let result = arr.reduce((accumulator, cur) => {\n    let id = cur.movieId;\n    let found = accumulator.find(elem => {\n      return elem.movieId == id;\n    });\n    /* If we find duplicates we do the weighted calculations */\n\n    if (found) {\n      found.ws += cur.ws; // sum score\n\n      found.sim += cur.sim; // sum sim for movie\n\n      found.wsSim = found.ws / found.sim; // end recommendation score\n    }\n    /* ... else we just push the single into the accumulator */\n    else {\n        accumulator.push(cur);\n      }\n\n    return accumulator; // return to result\n  }, []);\n  /* sort wsSim descending order */\n\n  result.sort((a, b) => parseFloat(b.wsSim) - parseFloat(a.wsSim));\n  return result;\n};\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\n\n\nconst weightedScore = async (a, score) => {\n  let arr = [];\n\n  for (let i = 0; i < a.length; i++) {\n    let wScore = a[i]['rating'] * score;\n    arr.push({\n      movieId: a[i]['movieId'],\n      title: a[i]['title'],\n      wScore: wScore,\n      ws: wScore,\n      sim: score,\n      wsSim: 0\n    });\n  }\n\n  return arr;\n};\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\n\n\nconst euclideanUser = async (a, b) => {\n  let sim = 0; // integer\n\n  let n = 0; //  counter for number of matching products\n\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i]['movieId'] == b[j]['movieId']) {\n        sim += (a[i]['rating'] - b[j]['rating']) ** 2;\n        n += 1;\n      }\n    }\n  }\n\n  if (n == 0) {\n    return 0;\n  }\n\n  let inv = 1 / (1 + sim);\n  return inv;\n};\n\nconst euclideanAPI = async (req, res) => {\n  const id = req.query.id; // main user\n\n  /* DB connection */\n\n  const db = await sqlite.open({\n    filename: './mydb.sqlite',\n    driver: sqlite3.Database\n  });\n  /* sql */\n\n  let user = await db.all('SELECT * FROM users where id = ?', [id]);\n  /* Retrieve ratings that belongs to main user */\n\n  let userRatings = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\n  /* All other users */\n\n  let otherUsers = await db.all('SELECT name, id FROM users where id != ?', [id]);\n  let userSimilarity = []; // adding euclidean result here\n\n  let wScores = [];\n  /* Getting the similarity between users */\n\n  for (let i = 0; i < otherUsers.length; i++) {\n    let subId = otherUsers[i]['id'];\n    let name = otherUsers[i]['name'];\n    /* Retrieve ratings for all the other users */\n\n    let otherUserRatings = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [subId]);\n    let euclideanScore = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\n\n    /* Retrieve ratings for all the other users again, but now without the movies that main user has rated */\n\n    let otherUserRatings2 = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ? AND movieId NOT IN (SELECT ratings.movieId FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?)', [subId, id]);\n    let wScore = await weightedScore(otherUserRatings2, euclideanScore); // get weighter score\n\n    wScores.push({\n      weighted_scores: wScore\n    });\n    /* Push objects */\n\n    userSimilarity.push({\n      id: subId,\n      user_name: name,\n      score: euclideanScore,\n      weighted_scores: wScore // high score = more similar\n\n    });\n  }\n  /* Sort similarity highest to lowest */\n\n\n  userSimilarity.sort((a, b) => parseFloat(b.score) - parseFloat(a.score));\n  wScores = wScores.map(y => {\n    return y['weighted_scores'];\n  });\n  user = JSON.stringify(user, null, 2);\n  let wCalc = await weightedCalculations(wScores);\n  let endResult = await buildJson(user, userSimilarity, wCalc);\n  res.json(userSimilarity);\n};\n\nexport default euclideanAPI;","map":{"version":3,"sources":["C:/Users/fredr/Documents/Universitet/HT20/2DV515 - Web Intelligence/A1/pages/api/euclidean/[id].ts"],"names":["sqlite3","require","sqlite","buildJson","user","userMatch","movieRecommends","weightedCalculations","a","arr","i","length","j","push","result","reduce","accumulator","cur","id","movieId","found","find","elem","ws","sim","wsSim","sort","b","parseFloat","weightedScore","score","wScore","title","euclideanUser","n","inv","euclideanAPI","req","res","query","db","open","filename","driver","Database","all","userRatings","otherUsers","userSimilarity","wScores","subId","name","otherUserRatings","euclideanScore","otherUserRatings2","weighted_scores","user_name","map","y","JSON","stringify","wCalc","endResult","json"],"mappings":"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","sourcesContent":["import { Console } from 'console';\r\nimport { NextApiRequest, NextApiResponse } from 'next';\r\nconst sqlite3 = require('sqlite3');\r\nconst sqlite = require('sqlite');\r\n\r\nconst buildJson = async (user: Array<any>, userMatch: Array<any>, movieRecommends: Array<any>) => {\r\n\r\n    return user;\r\n\r\n}\r\n\r\nconst weightedCalculations = async (a: Array<any>) => {\r\n    \r\n    let arr: Array<any> = []; // array for concat\r\n\r\n    /* wsum */\r\n    for (let i: number = 0; i < a.length; i++) {\r\n        for (let j: number = 0; j < a[i].length; j++) {\r\n            arr.push(a[i][j]);\r\n        }\r\n    }\r\n\r\n    let result = arr.reduce((accumulator, cur) => {\r\n\r\n        let id = cur.movieId;\r\n        \r\n        let found: any = accumulator.find((elem: { movieId: any; }) => {\r\n            return elem.movieId == id;\r\n        })\r\n\r\n        /* If we find duplicates we do the weighted calculations */\r\n        if (found) {\r\n            found.ws += cur.ws; // sum score\r\n            found.sim += cur.sim; // sum sim for movie\r\n            found.wsSim = found.ws / found.sim; // end recommendation score\r\n        }\r\n        /* ... else we just push the single into the accumulator */\r\n        else {\r\n            accumulator.push(cur)\r\n        }\r\n        \r\n        return accumulator; // return to result\r\n\r\n    }, []);\r\n\r\n    /* sort wsSim descending order */\r\n    result.sort((a: { wsSim: any; }, b: { wsSim: any; }) =>\r\n        parseFloat(b.wsSim) - parseFloat(a.wsSim)\r\n    ); \r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Calculating weighted score\r\n * @param a \r\n */\r\nconst weightedScore = async (a: any, score: number) => {\r\n    let arr: Array<any> = [];\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        let wScore: number = a[i]['rating'] * score;\r\n\r\n        arr.push({\r\n            movieId: a[i]['movieId'],\r\n            title: a[i]['title'],\r\n            wScore: wScore,\r\n            ws: wScore,\r\n            sim: score,\r\n            wsSim: 0\r\n        });\r\n\r\n    }\r\n\r\n    return arr;\r\n}\r\n \r\n/**\r\n * Calculating euclidean score\r\n * @param a \r\n * @param b \r\n */\r\nconst euclideanUser = async (a: any, b: any) => {\r\n    let sim: number = 0; // integer\r\n    let n: number = 0; //  counter for number of matching products\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n        for (let j = 0; j < b.length; j++) {\r\n            if (a[i]['movieId'] == b[j]['movieId']) {\r\n                sim += (a[i]['rating'] - b[j]['rating']) ** 2;\r\n                n += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (n == 0) {\r\n        return 0;\r\n    }\r\n\r\n    let inv: number = 1 / (1 + sim);\r\n\r\n    return inv;\r\n};\r\n\r\nconst euclideanAPI = async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const id: any = req.query.id; // main user\r\n\r\n    /* DB connection */\r\n    const db = await sqlite.open({\r\n        filename: './mydb.sqlite',\r\n        driver: sqlite3.Database\r\n    });\r\n   \r\n    /* sql */\r\n    let user: any = await db.all('SELECT * FROM users where id = ?', [id]);\r\n    /* Retrieve ratings that belongs to main user */\r\n    let userRatings: any = await db.all('SELECT userId, movies.title, movieId, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [id]);\r\n\r\n    /* All other users */\r\n    let otherUsers: any = await db.all('SELECT name, id FROM users where id != ?', [id]);\r\n\r\n    let userSimilarity: Array<any> = []; // adding euclidean result here\r\n    let wScores: Array<any> = [];\r\n\r\n    /* Getting the similarity between users */\r\n    for (let i: number = 0; i < otherUsers.length; i++) {\r\n\r\n        let subId: number = otherUsers[i]['id'];\r\n        let name: String = otherUsers[i]['name'];\r\n\r\n        /* Retrieve ratings for all the other users */\r\n        let otherUserRatings: any = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?', [subId]);\r\n\r\n        let euclideanScore: any = await euclideanUser(userRatings, otherUserRatings); // get euclidean score\r\n\r\n        /* Retrieve ratings for all the other users again, but now without the movies that main user has rated */\r\n        let otherUserRatings2: any = await db.all('SELECT ratings.movieId, title, ratings.rating FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ? AND movieId NOT IN (SELECT ratings.movieId FROM ratings, users, movies WHERE users.id = userId AND movies.id = movieId AND users.id = ?)', [subId, id]);\r\n     \r\n\r\n        let wScore: any = await weightedScore(otherUserRatings2, euclideanScore); // get weighter score\r\n\r\n        wScores.push({weighted_scores: wScore});\r\n\r\n        /* Push objects */\r\n        userSimilarity.push({\r\n            id: subId,\r\n            user_name: name,\r\n            score: euclideanScore,\r\n            weighted_scores: wScore // high score = more similar\r\n        });\r\n    }\r\n\r\n    /* Sort similarity highest to lowest */\r\n    userSimilarity.sort((a: { score: any; }, b: { score: any; }) =>\r\n    parseFloat(b.score) - parseFloat(a.score)\r\n    ); \r\n\r\n    wScores = wScores.map(y => {\r\n        return y['weighted_scores'];\r\n    })\r\n\r\n    user = JSON.stringify(user, null, 2);\r\n\r\n    let wCalc = await weightedCalculations(wScores);\r\n\r\n    let endResult = await buildJson(user, userSimilarity, wCalc);\r\n\r\n    res.json(userSimilarity);\r\n}\r\n\r\nexport default euclideanAPI;"]},"metadata":{},"sourceType":"module"}